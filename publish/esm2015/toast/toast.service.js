import { Injectable, ApplicationRef, NgZone, ComponentFactoryResolver } from '@angular/core';
import { ToastComponent } from './toast.component';
import { ToastOptions } from './toast-options.provider';
export class ToastService {
    constructor(_appRef, _cfr, _zone) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        this._zone = _zone;
        this.timeout = null;
        this.zone = null;
        this.compRef = null;
        this.insertElement = null;
        this.toastCompFactory = null;
        this.appRef = null;
        this.zone = this._zone;
        this.appRef = this._appRef;
        this.toastCompFactory = this._cfr.resolveComponentFactory(ToastComponent);
    }
    _initConfig(config, options) {
        const props = {};
        const optionalParams = ['content', 'iconType', 'mask', 'position'];
        config = Object.assign(options, config);
        optionalParams.forEach(key => {
            if (config[key] !== undefined) {
                props[key] = config[key];
            }
        });
        const iconType = {
            info: '',
            success: 'success',
            fail: 'fail',
            offline: 'dislike',
            loading: 'loading'
        }[options.iconType];
        props['iconType'] = iconType;
        props['mask'] = options.mask;
        props['position'] = options.position;
        return props;
    }
    notice(config, type, timeInterval = 2000, onClose, mask = true, position = 'middle') {
        // 如果已经存在，在没有遮罩层的情况下，会响应别的toast，需要清除原来的
        if (this.compRef) {
            this.hide();
        }
        const options = new ToastOptions();
        options.iconType = type;
        options.mask = mask;
        options.position = position;
        const props = this._initConfig(config, options);
        this.insertElement = document.body.insertBefore(document.createElement(this.toastCompFactory.selector), document.body.firstChild);
        let instance;
        let subject;
        this.compRef = this._appRef.bootstrap(this.toastCompFactory);
        instance = this.compRef.instance;
        subject = instance.subject;
        if (timeInterval) {
            this.timeout = setTimeout(() => {
                if (onClose) {
                    onClose();
                }
                this.hide();
            }, timeInterval);
        }
        Object.assign(instance, props);
        return subject;
    }
    /**
     * Open info dialog
     */
    info(content, timeInterval, onClose, mask, position) {
        const config = Object.assign({
            iconType: 'info',
            content: content
        });
        return this.notice(config, 'info', timeInterval, onClose, mask, position);
    }
    /**
     * Open success dialog
     */
    success(content, timeInterval, onClose, mask, position) {
        const config = Object.assign({
            iconType: 'success',
            content: content
        });
        return this.notice(config, 'success', timeInterval, onClose, mask, position);
    }
    show(content, timeInterval, mask, position) {
        const config = Object.assign({
            iconType: 'info',
            content: content
        });
        return this.notice(config, 'info', timeInterval, () => { }, mask, position);
    }
    fail(content, timeInterval, onClose, mask, position) {
        const config = Object.assign({
            iconType: 'fail',
            content: content
        });
        return this.notice(config, 'fail', timeInterval, onClose, mask, position);
    }
    offline(content, timeInterval, onClose, mask, position) {
        const config = Object.assign({
            iconType: 'offline',
            content: content
        });
        return this.notice(config, 'offline', timeInterval, onClose, mask, position);
    }
    loading(content, timeInterval, onClose, mask, position) {
        const config = Object.assign({
            iconType: 'loading',
            content: content
        });
        return this.notice(config, 'loading', timeInterval, onClose, mask, position);
    }
    hide() {
        if (this.timeout) {
            clearTimeout(this.timeout);
        }
        if (this.compRef) {
            this._zone.run(() => {
                this.compRef.destroy();
                document.body.removeChild(this.insertElement);
            });
            this.compRef = null;
            this.insertElement = null;
        }
    }
}
ToastService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
    { type: Injectable }
];
ToastService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,