{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class SliderComponent implements OnInit, ControlValueAccessor {\n    private _elf;\n    prefixCls: string;\n    sliderLength: number;\n    sliderStart: number;\n    sliderCls: object;\n    offset: number;\n    length: number;\n    private _min;\n    private _max;\n    private _step;\n    private _value;\n    private _defaultValue;\n    private _disabled;\n    private _marks;\n    private _dots;\n    private _included;\n    private _handleStyle;\n    private _trackStyle;\n    private _railStyle;\n    get min(): number;\n    set min(value: number);\n    get max(): number;\n    set max(value: number);\n    get step(): number;\n    set step(value: number);\n    get value(): number;\n    set value(value: number);\n    set defaultValue(value: any);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get marks(): object;\n    set marks(value: object);\n    get dots(): boolean;\n    set dots(value: boolean);\n    get included(): boolean;\n    set included(value: boolean);\n    get handleStyle(): object;\n    set handleStyle(value: object);\n    get trackStyle(): object;\n    set trackStyle(value: object);\n    get railStyle(): object;\n    set railStyle(value: object);\n    onAfterChange: EventEmitter<any>;\n    onChange: EventEmitter<any>;\n    amSliderWrapper: boolean;\n    private _ngModelOnChange;\n    private _ngModelOnTouched;\n    constructor(_elf: ElementRef);\n    setCls(): void;\n    handleChange(e: any): void;\n    handleAfterChange(e: any): void;\n    valueRange(): void;\n    ngOnInit(): void;\n    writeValue(value: number): void;\n    setValue(value: number, isWriteValue?: boolean): void;\n    setTrack(e: any): void;\n    registerOnChange(fn: (value: number) => void): void;\n    registerOnTouched(fn: (value: number) => void): void;\n}\n"]}