import { OnInit, EventEmitter, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class SliderComponent implements OnInit, ControlValueAccessor {
    private _elf;
    prefixCls: string;
    sliderLength: number;
    sliderStart: number;
    sliderCls: object;
    offset: number;
    length: number;
    private _min;
    private _max;
    private _step;
    private _value;
    private _defaultValue;
    private _disabled;
    private _marks;
    private _dots;
    private _included;
    private _handleStyle;
    private _trackStyle;
    private _railStyle;
    get min(): number;
    set min(value: number);
    get max(): number;
    set max(value: number);
    get step(): number;
    set step(value: number);
    get value(): number;
    set value(value: number);
    set defaultValue(value: any);
    get disabled(): boolean;
    set disabled(value: boolean);
    get marks(): object;
    set marks(value: object);
    get dots(): boolean;
    set dots(value: boolean);
    get included(): boolean;
    set included(value: boolean);
    get handleStyle(): object;
    set handleStyle(value: object);
    get trackStyle(): object;
    set trackStyle(value: object);
    get railStyle(): object;
    set railStyle(value: object);
    onAfterChange: EventEmitter<any>;
    onChange: EventEmitter<any>;
    amSliderWrapper: boolean;
    private _ngModelOnChange;
    private _ngModelOnTouched;
    constructor(_elf: ElementRef);
    setCls(): void;
    handleChange(e: any): void;
    handleAfterChange(e: any): void;
    valueRange(): void;
    ngOnInit(): void;
    writeValue(value: number): void;
    setValue(value: number, isWriteValue?: boolean): void;
    setTrack(e: any): void;
    registerOnChange(fn: (value: number) => void): void;
    registerOnTouched(fn: (value: number) => void): void;
}
