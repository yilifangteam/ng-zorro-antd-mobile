{"version":3,"file":"stepper.component.d.ts","sources":["stepper.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare class StepperComponent implements OnChanges, ControlValueAccessor {\n    prefixCls: string;\n    upDisableCls: object;\n    downDisableCls: object;\n    stepperCls: object;\n    private _max;\n    private _min;\n    private _value;\n    private _step;\n    private _defaultValue;\n    private _disabled;\n    private _readOnly;\n    private _showNumber;\n    private _upDisabled;\n    private _downDisabled;\n    private _isUpClick;\n    private _isDownClick;\n    get max(): number;\n    set max(value: number);\n    get min(): number;\n    set min(value: number);\n    get value(): number;\n    set value(v: number);\n    set step(value: any);\n    set defaultValue(value: any);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get readOnly(): boolean;\n    set readOnly(value: boolean);\n    set showNumber(value: boolean);\n    onChange: EventEmitter<any>;\n    clsStepper: boolean;\n    clsStpDisabled: boolean;\n    clsShowNum: boolean;\n    private onChangeFn;\n    private onTouchFn;\n    constructor();\n    onIncrease(): void;\n    onDecrease(): void;\n    inputChange(event: any): void;\n    setCls(): void;\n    ngOnChanges(): void;\n    writeValue(value: number): void;\n    registerOnChange(fn: (value: number) => void): void;\n    registerOnTouched(fn: (value: number) => void): void;\n    plus(num1: number, num2: number): number;\n    minus(num1: number, num2: number): number;\n    digitLength(num: number): number;\n    times(num1: number, num2: number): number;\n    floatToFixed(num: number): number;\n    strip(num: number, precision?: number): number;\n}\n"]}