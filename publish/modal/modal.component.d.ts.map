{"version":3,"file":"modal.component.d.ts","sources":["modal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, TemplateRef, EventEmitter } from '@angular/core';\nimport { ModalOptions } from './modal-options.provider';\nimport { Observable } from 'rxjs';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ModalRef } from './modal-ref.class';\nexport declare class ModalComponent<T = any, R = any> extends ModalRef<T, R> implements ControlValueAccessor {\n    option: ModalOptions;\n    elementRef: ElementRef;\n    autoFocus: {\n        focus: boolean;\n        date: Date;\n    };\n    transitionName: string;\n    maskTransitionName: string;\n    wrapCls: object;\n    cls: object;\n    btnGroupClass: object;\n    data: {\n        text: string;\n        password: string;\n    };\n    onChanged: (visiable: boolean) => {};\n    onTouched: () => {};\n    set title(value: string | TemplateRef<any>);\n    set closable(value: boolean);\n    set maskClosable(value: boolean);\n    set popup(value: boolean);\n    set animationType(value: string);\n    set transparent(value: boolean);\n    set footer(value: Array<any>);\n    set platform(value: string);\n    set className(value: string);\n    set wrapClassName(value: string);\n    set actions(value: Array<any>);\n    set defaultValue(value: Array<string>);\n    set type(value: string);\n    set placeholders(value: Array<string>);\n    set operation(value: boolean);\n    onClose: EventEmitter<any>;\n    afterOpenEmitter: EventEmitter<any>;\n    afterCloseEmitter: EventEmitter<any>;\n    panend(event: any): void;\n    constructor(option: ModalOptions, elementRef: ElementRef);\n    isTemplateRef(value: string | TemplateRef<any>): boolean;\n    isNoTitle(value: string | TemplateRef<any>): boolean;\n    setTransitionName(visible: boolean): void;\n    setActiveName(name: string): string;\n    setLeaveActiveName(name: string): string;\n    setClassMap(): void;\n    inputChange(type: string, value: string): void;\n    leaveAnimation(): void;\n    writeValue(value: boolean): void;\n    registerOnChange(fn: (_: boolean) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    get afterOpen(): Observable<void>;\n    get afterClose(): Observable<R>;\n    getInstance(): ModalComponent;\n    getElement(): HTMLElement;\n    close(): void;\n    triggerOk(): void;\n    triggerCancel(): void;\n    destroy(): void;\n}\nexport declare class ModalServiceComponent extends ModalComponent {\n    option: ModalOptions;\n    elementRef: ElementRef;\n    constructor(option: ModalOptions, elementRef: ElementRef);\n}\n"]}