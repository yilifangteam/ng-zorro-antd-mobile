{"version":3,"file":"input-item.component.d.ts","sources":["input-item.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, EventEmitter, OnInit, Renderer2, ElementRef, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { isTemplateRef } from '../core/util/check';\nimport { NzmInputType } from './input-item.definitions';\nexport declare class InputItemComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n    private element;\n    private render;\n    prefixCls: string;\n    wrapCls: object;\n    labelCls: object;\n    controlCls: object;\n    setFocus: object;\n    pattern: string;\n    autoFocus: boolean;\n    inputType: NzmInputType;\n    ngTemplate: boolean;\n    isTemplateRef: typeof isTemplateRef;\n    private _el;\n    private _type;\n    private _value;\n    private _defaultValue;\n    private _placeholder;\n    private _editable;\n    private _disabled;\n    private _clear;\n    private _maxLength;\n    private _error;\n    private _extra;\n    private _labelNumber;\n    private _updatePlaceholder;\n    private _prefixListCls;\n    private _name;\n    private _moneyKeyboardAlign;\n    private _locale;\n    private _focus;\n    private _isClear;\n    private _fontColor;\n    private _content;\n    private _inputLock;\n    private _nzRequired;\n    lableRef: ElementRef;\n    inputElementRef: ElementRef;\n    get nzRequired(): boolean;\n    set nzRequired(value: boolean);\n    get type(): NzmInputType;\n    set type(value: NzmInputType);\n    get value(): string;\n    set value(v: string);\n    get defaultValue(): string;\n    set defaultValue(value: string);\n    get placeholder(): string;\n    set placeholder(value: string);\n    get editable(): boolean;\n    set editable(value: boolean);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get clear(): boolean;\n    set clear(value: boolean);\n    get maxLength(): number;\n    set maxLength(value: number);\n    get error(): boolean;\n    set error(value: boolean);\n    get extra(): string | TemplateRef<any>;\n    set extra(value: string | TemplateRef<any>);\n    set labelNumber(value: number);\n    set updatePlaceholder(value: boolean);\n    get prefixListCls(): string;\n    set prefixListCls(value: string);\n    get name(): string;\n    set name(value: string);\n    get moneyKeyboardAlign(): string;\n    set moneyKeyboardAlign(value: string);\n    set locale(value: any);\n    get fontColor(): string;\n    set fontColor(value: string);\n    set focus(value: any);\n    get content(): string | TemplateRef<any>;\n    set content(value: string | TemplateRef<any>);\n    compositionFilter: boolean;\n    onChange: EventEmitter<any>;\n    onBlur: EventEmitter<any>;\n    onFocus: EventEmitter<any>;\n    onErrorClick: EventEmitter<any>;\n    onExtraClick: EventEmitter<any>;\n    clsItem: boolean;\n    clsDisabled: boolean;\n    clsError: boolean;\n    clsFocus: boolean;\n    clsAndroid: boolean;\n    constructor(element: ElementRef, render: Renderer2);\n    _onChange: (_: any) => void;\n    setCls(): void;\n    inputChange(inputValue: string): void;\n    compositionStart(): void;\n    compositionEnd(): void;\n    inputFocus(value: any): void;\n    inputBlur(value: any): void;\n    clearInput(): void;\n    errorClick(e: any): void;\n    extraClick(e: any): void;\n    writeValue(value: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(fn: (_: any) => void): void;\n    registerOnTouched(fn: any): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n}\n"]}